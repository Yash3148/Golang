High order functions

* Function that receives a function as an argument or returns a function as output.

why use high order functions?

* Composition 
   * Creating smaller functions that take care of certain piece of logic.
   * Composing complex function by using different smaller functions

* Reduces bugs
* Code gets easier to read and understand    

         package main
         import "fmt"

         func calcArea(r float64) float64  {
            return 3.14 * r * r
         }

         func calcPerimeter(r float64) float64 {
            return 2 * 3.14 * r
         }

         func calcDiameter (r float64) float64 {
            return 2 * r
         }

         func main()  {
              var query int
              var radius float64

              fmt.Print("Enter the radius of the circle: ")
              fmt.Scanf("%f", &radius)
              fmt.Printf("Enter \b 1 - area \n 2 - perimeter \n 3 - diameter: ")
              fmt.Scanf("%d", &query)

              if query ==1 {
               fmt.Println("Result: ", calcArea(radius))
              }else if query ==2 {
               fmt.Println("Result: ", calcPerimeter(radius))
              }else if query ==3 {
               fmt.Println("Result: ", calcDiameter(radius))
              }else {
               fmt.Println("Invalid Query")
              }
         }
 // output 
Enter the radius of the circle: 5
Enter -
 1 - area 
 2 - perimeter 
 3 - diameter 
 3
 Result:  10

 package main
 import "fmt"

 func calcArea(r float64) float64  {
    return 3.14 * r * r
 }

 func calcPerimeter(r float64) float64 {
    return 2 * 3.14 * r
 }

 func calcDiameter (r float64) float64 {
    return 2 * r
 }

 func main()  {
      var query int
      var radius float64

      fmt.Print("Enter the radius of the circle: ")
      fmt.Scanf("%f", &radius)
      fmt.Printf("Enter \b 1 - area \n 2 - perimeter \n 3 - diameter: ")
      fmt.Scanf("%d", &query)

      printResult(radius, getFunction(query))
      
 }
